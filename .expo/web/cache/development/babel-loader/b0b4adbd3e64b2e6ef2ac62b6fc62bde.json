{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Projects\\\\Demo\\\\src\\\\screens\\\\LoadingScreen.js\",\n    _templateObject;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport LottieView from \"lottie-react-native\";\nimport Text from \"../components/Text\";\nimport { UserContext } from \"../context/UserContext\";\nimport { FirebaseContext } from \"../context/FirebaseContext\";\nexport default function LoadingScreen() {\n  var _useContext = useContext(UserContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      _ = _useContext2[0],\n      setUser = _useContext2[1];\n\n  var firebase = useContext(FirebaseContext);\n  useEffect(function () {\n    setTimeout(function _callee() {\n      var user, userInfo;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              user = firebase.getCurrentUser();\n\n              if (!user) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(firebase.getUserInfo(user.uid));\n\n            case 4:\n              userInfo = _context.sent;\n              setUser({\n                isLoggedIn: true,\n                email: userInfo.email,\n                uid: user.uid,\n                username: userInfo.username,\n                profilePhotoUrl: userInfo.profilePhotoUrl\n              });\n              _context.next = 9;\n              break;\n\n            case 8:\n              setUser(function (state) {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                  isLoggedIn: false\n                });\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 500);\n  }, []);\n  return React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    title: true,\n    color: \"#ffffff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"My Sports Album\"), React.createElement(LottieView, {\n    source: require(\"../../assets/animation.json\"),\n    autoPlay: true,\n    loop: true,\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n}\nvar Container = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  flex: 1;\\n  align-items: center;\\n  justify-content: center;\\n  background-color: #222222;\\n\"])));","map":{"version":3,"sources":["C:/Projects/Demo/src/screens/LoadingScreen.js"],"names":["React","useContext","useEffect","styled","LottieView","Text","UserContext","FirebaseContext","LoadingScreen","_","setUser","firebase","setTimeout","user","getCurrentUser","getUserInfo","uid","userInfo","isLoggedIn","email","username","profilePhotoUrl","state","require","width","Container","View"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,IAAP;AAEA,SAASC,WAAT;AACA,SAASC,eAAT;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA,oBACjBP,UAAU,CAACK,WAAD,CADO;AAAA;AAAA,MAC/BG,CAD+B;AAAA,MAC5BC,OAD4B;;AAEtC,MAAMC,QAAQ,GAAGV,UAAU,CAACM,eAAD,CAA3B;AAEAL,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACHC,cAAAA,IADG,GACIF,QAAQ,CAACG,cAAT,EADJ;;AAAA,mBAGLD,IAHK;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAIgBF,QAAQ,CAACI,WAAT,CAAqBF,IAAI,CAACG,GAA1B,CAJhB;;AAAA;AAIDC,cAAAA,QAJC;AAMPP,cAAAA,OAAO,CAAC;AACNQ,gBAAAA,UAAU,EAAE,IADN;AAENC,gBAAAA,KAAK,EAAEF,QAAQ,CAACE,KAFV;AAGNH,gBAAAA,GAAG,EAAEH,IAAI,CAACG,GAHJ;AAINI,gBAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAJb;AAKNC,gBAAAA,eAAe,EAAEJ,QAAQ,CAACI;AALpB,eAAD,CAAP;AANO;AAAA;;AAAA;AAcPX,cAAAA,OAAO,CAAC,UAACY,KAAD;AAAA,uDAAiBA,KAAjB;AAAwBJ,kBAAAA,UAAU,EAAE;AAApC;AAAA,eAAD,CAAP;;AAdO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAgBP,GAhBO,CAAV;AAiBD,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,MAAX;AAAY,IAAA,KAAK,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAIE,oBAAC,UAAD;AACE,IAAA,MAAM,EAAEK,OAAO,+BADjB;AAEE,IAAA,QAAQ,MAFV;AAGE,IAAA,IAAI,MAHN;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAaD;AAED,IAAMC,SAAS,GAAGtB,MAAM,CAACuB,IAAV,0KAAf","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport LottieView from \"lottie-react-native\";\r\nimport Text from \"../components/Text\";\r\n\r\nimport { UserContext } from \"../context/UserContext\";\r\nimport { FirebaseContext } from \"../context/FirebaseContext\";\r\n\r\nexport default function LoadingScreen() {\r\n  const [_, setUser] = useContext(UserContext);\r\n  const firebase = useContext(FirebaseContext);\r\n\r\n  useEffect(() => {\r\n    setTimeout(async () => {\r\n      const user = firebase.getCurrentUser();\r\n\r\n      if (user) {\r\n        const userInfo = await firebase.getUserInfo(user.uid);\r\n\r\n        setUser({\r\n          isLoggedIn: true,\r\n          email: userInfo.email,\r\n          uid: user.uid,\r\n          username: userInfo.username,\r\n          profilePhotoUrl: userInfo.profilePhotoUrl,\r\n        });\r\n      } else {\r\n        setUser((state) => ({ ...state, isLoggedIn: false }));\r\n      }\r\n    }, 500);\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Text title color=\"#ffffff\">\r\n        My Sports Album\r\n      </Text>\r\n      <LottieView\r\n        source={require(\"../../assets/animation.json\")}\r\n        autoPlay\r\n        loop\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.View`\r\n  flex: 1;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #222222;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}